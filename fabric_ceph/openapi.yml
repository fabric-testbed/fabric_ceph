openapi: 3.0.3
info:
  title: Ceph Dashboard â€“ Auth & Cluster User API
  version: 1.0.0
  description: |
    Minimal OpenAPI definition for building an app around Ceph Dashboard REST endpoints used to
    manage CephX users and authenticate via JWT. These paths mirror the documented `/api` surface.

servers:
  # Added by API Auto Mocking Plugin
  - description: Local development server
    url: http://localhost:3500
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/RENCI3/ceph/1.0.0
  - url: https://{host}:{port}/api
    variables:
      host:
        default: mgr.example.org
      port:
        default: "8443"

tags:
  - name: Cluster User

paths:
  /version:
    get:
      tags:
      - version
      summary: Version
      description: Version
      operationId: version_get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/version'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_500_internal_server_error'

  /cluster/user:
    get:
      tags: [Cluster User]
      summary: List all CephX users
      operationId: listUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CephUser'
        '401':
          description: Unauthorized
      x-accepts:
        - application/vnd.ceph.api.v1.0+json

    post:
      tags: [Cluster User]
      summary: Create a CephX user (with capabilities)
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateUserRequest'
            examples:
              basic:
                value:
                  user_entity: client.demo
                  capabilities:
                    - entity: mon
                      cap: "allow r"
                    - entity: osd
                      cap: "allow rwx"
                    - entity: mds
                      cap: "allow rw"
      responses:
        '201':
          description: Created
        '200':
          description: OK (some deployments)
        '400':
          description: Bad request or entity exists with different caps
        '401':
          description: Unauthorized
      x-accepts:
        - application/vnd.ceph.api.v1.0+json

    put:
      tags: [Cluster User]
      summary: Update/overwrite capabilities for a CephX user
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateUserRequest'
      responses:
        '200':
          description: Updated
        '201':
          description: Created (some deployments)
        '401':
          description: Unauthorized
      x-accepts:
        - application/vnd.ceph.api.v1.0+json

  /cluster/user/{entity}:
    delete:
      tags: [Cluster User]
      summary: Delete a CephX user
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: entity
          required: true
          schema:
            type: string
          description: CephX entity, e.g., `client.demo`
      responses:
        '200':
          description: Deleted
        '404':
          description: Not found
        '401':
          description: Unauthorized
      x-accepts:
        - application/vnd.ceph.api.v1.0+json

  /cluster/user/export:
    post:
      tags: [Cluster User]
      summary: Export keyring(s) for one or more CephX users
      operationId: exportUsers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportUsersRequest'
            examples:
              single:
                value:
                  entities: ["client.demo"]
              multiple:
                value:
                  entities: ["client.alice","client.bob"]
      responses:
        '200':
          description: Keyring text payload
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      keyring:
                        type: string
                  - type: string
        '401':
          description: Unauthorized
      x-accepts:
        - application/vnd.ceph.api.v1.0+json

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    version:
      type: object
      allOf:
      - $ref: '#/components/schemas/status_200_ok_single'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/version_data'
    version_data:
      required:
      - reference
      - version
      properties:
        reference:
          type: string
          example: https://github.com/fabric-testbed/ControlFramework
        version:
          type: string
          example: 1.0.0
      example: null
    status_200_ok_single:
      type: object
      properties:
        size:
          type: integer
          default: 1
        status:
          type: integer
          default: 200
        type:
          type: string
    status_500_internal_server_error:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/status_500_internal_server_error_errors'
        type:
          type: string
          default: error
        size:
          type: integer
          default: 1
        status:
          type: integer
          default: 500
    status_500_internal_server_error_errors:
      type: object
      properties:
        message:
          type: string
          default: Internal Server Error
        details:
          type: string
      example: null

    Capability:
      type: object
      required: [entity, cap]
      properties:
        entity:
          type: string
          description: One of mon|osd|mds|mgr (commonly mon/osd/mds)
          example: mds
        cap:
          type: string
          description: Capability string, e.g. `allow rw`, `allow r fsname=CEPH-FS-01 path=/volumes/_nogroup/demo`
          example: "allow rw"

    CreateOrUpdateUserRequest:
      type: object
      required: [user_entity, capabilities]
      properties:
        user_entity:
          type: string
          description: CephX entity name (e.g., `client.demo`)
          example: client.demo
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'

    CephUser:
      type: object
      properties:
        user_entity:
          type: string
          example: client.demo
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        # Implementations sometimes include keys or metadata; keep it open-ended
        keys:
          type: array
          items:
            type: object
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          nullable: true

    ExportUsersRequest:
      type: object
      required: [entities]
      properties:
        entities:
          type: array
          description: List of CephX entities to export
          items:
            type: string
          example: ["client.demo","client.alice"]