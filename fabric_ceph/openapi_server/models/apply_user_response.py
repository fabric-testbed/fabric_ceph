from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_ceph.openapi_server.models.base_model import Model
from fabric_ceph.openapi_server.models.capability import Capability
from fabric_ceph.openapi_server import util

from fabric_ceph.openapi_server.models.capability import Capability  # noqa: E501
from fabric_ceph.response.serialization import deep_to_dict


class ApplyUserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_entity=None, fs_name=None, subvol_name=None, group_name=None, source_cluster=None, created_on_source=None, updated_on_source=None, imported_to=None, caps_applied=None, paths=None, errors=None):  # noqa: E501
        """ApplyUserResponse - a model defined in OpenAPI

        :param user_entity: The user_entity of this ApplyUserResponse.  # noqa: E501
        :type user_entity: str
        :param fs_name: The fs_name of this ApplyUserResponse.  # noqa: E501
        :type fs_name: str
        :param subvol_name: The subvol_name of this ApplyUserResponse.  # noqa: E501
        :type subvol_name: str
        :param group_name: The group_name of this ApplyUserResponse.  # noqa: E501
        :type group_name: str
        :param source_cluster: The source_cluster of this ApplyUserResponse.  # noqa: E501
        :type source_cluster: str
        :param created_on_source: The created_on_source of this ApplyUserResponse.  # noqa: E501
        :type created_on_source: bool
        :param updated_on_source: The updated_on_source of this ApplyUserResponse.  # noqa: E501
        :type updated_on_source: bool
        :param imported_to: The imported_to of this ApplyUserResponse.  # noqa: E501
        :type imported_to: List[str]
        :param caps_applied: The caps_applied of this ApplyUserResponse.  # noqa: E501
        :type caps_applied: Dict[str, List[Capability]]
        :param paths: The paths of this ApplyUserResponse.  # noqa: E501
        :type paths: Dict[str, str]
        :param errors: The errors of this ApplyUserResponse.  # noqa: E501
        :type errors: Dict[str, str]
        """
        self.openapi_types = {
            'user_entity': str,
            'fs_name': str,
            'subvol_name': str,
            'group_name': str,
            'source_cluster': str,
            'created_on_source': bool,
            'updated_on_source': bool,
            'imported_to': List[str],
            'caps_applied': Dict[str, List[Capability]],
            'paths': Dict[str, str],
            'errors': Dict[str, str]
        }

        self.attribute_map = {
            'user_entity': 'user_entity',
            'fs_name': 'fs_name',
            'subvol_name': 'subvol_name',
            'group_name': 'group_name',
            'source_cluster': 'source_cluster',
            'created_on_source': 'created_on_source',
            'updated_on_source': 'updated_on_source',
            'imported_to': 'imported_to',
            'caps_applied': 'caps_applied',
            'paths': 'paths',
            'errors': 'errors'
        }

        self._user_entity = user_entity
        self._fs_name = fs_name
        self._subvol_name = subvol_name
        self._group_name = group_name
        self._source_cluster = source_cluster
        self._created_on_source = created_on_source
        self._updated_on_source = updated_on_source
        self._imported_to = imported_to
        self._caps_applied = caps_applied
        self._paths = paths
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt) -> 'ApplyUserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplyUserResponse of this ApplyUserResponse.  # noqa: E501
        :rtype: ApplyUserResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_entity(self) -> str:
        """Gets the user_entity of this ApplyUserResponse.


        :return: The user_entity of this ApplyUserResponse.
        :rtype: str
        """
        return self._user_entity

    @user_entity.setter
    def user_entity(self, user_entity: str):
        """Sets the user_entity of this ApplyUserResponse.


        :param user_entity: The user_entity of this ApplyUserResponse.
        :type user_entity: str
        """

        self._user_entity = user_entity

    @property
    def fs_name(self) -> str:
        """Gets the fs_name of this ApplyUserResponse.


        :return: The fs_name of this ApplyUserResponse.
        :rtype: str
        """
        return self._fs_name

    @fs_name.setter
    def fs_name(self, fs_name: str):
        """Sets the fs_name of this ApplyUserResponse.


        :param fs_name: The fs_name of this ApplyUserResponse.
        :type fs_name: str
        """

        self._fs_name = fs_name

    @property
    def subvol_name(self) -> str:
        """Gets the subvol_name of this ApplyUserResponse.


        :return: The subvol_name of this ApplyUserResponse.
        :rtype: str
        """
        return self._subvol_name

    @subvol_name.setter
    def subvol_name(self, subvol_name: str):
        """Sets the subvol_name of this ApplyUserResponse.


        :param subvol_name: The subvol_name of this ApplyUserResponse.
        :type subvol_name: str
        """

        self._subvol_name = subvol_name

    @property
    def group_name(self) -> str:
        """Gets the group_name of this ApplyUserResponse.


        :return: The group_name of this ApplyUserResponse.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name: str):
        """Sets the group_name of this ApplyUserResponse.


        :param group_name: The group_name of this ApplyUserResponse.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def source_cluster(self) -> str:
        """Gets the source_cluster of this ApplyUserResponse.


        :return: The source_cluster of this ApplyUserResponse.
        :rtype: str
        """
        return self._source_cluster

    @source_cluster.setter
    def source_cluster(self, source_cluster: str):
        """Sets the source_cluster of this ApplyUserResponse.


        :param source_cluster: The source_cluster of this ApplyUserResponse.
        :type source_cluster: str
        """

        self._source_cluster = source_cluster

    @property
    def created_on_source(self) -> bool:
        """Gets the created_on_source of this ApplyUserResponse.


        :return: The created_on_source of this ApplyUserResponse.
        :rtype: bool
        """
        return self._created_on_source

    @created_on_source.setter
    def created_on_source(self, created_on_source: bool):
        """Sets the created_on_source of this ApplyUserResponse.


        :param created_on_source: The created_on_source of this ApplyUserResponse.
        :type created_on_source: bool
        """

        self._created_on_source = created_on_source

    @property
    def updated_on_source(self) -> bool:
        """Gets the updated_on_source of this ApplyUserResponse.


        :return: The updated_on_source of this ApplyUserResponse.
        :rtype: bool
        """
        return self._updated_on_source

    @updated_on_source.setter
    def updated_on_source(self, updated_on_source: bool):
        """Sets the updated_on_source of this ApplyUserResponse.


        :param updated_on_source: The updated_on_source of this ApplyUserResponse.
        :type updated_on_source: bool
        """

        self._updated_on_source = updated_on_source

    @property
    def imported_to(self) -> List[str]:
        """Gets the imported_to of this ApplyUserResponse.

        Clusters where the keyring was imported  # noqa: E501

        :return: The imported_to of this ApplyUserResponse.
        :rtype: List[str]
        """
        return self._imported_to

    @imported_to.setter
    def imported_to(self, imported_to: List[str]):
        """Sets the imported_to of this ApplyUserResponse.

        Clusters where the keyring was imported  # noqa: E501

        :param imported_to: The imported_to of this ApplyUserResponse.
        :type imported_to: List[str]
        """

        self._imported_to = imported_to

    @property
    def caps_applied(self) -> Dict[str, List[Capability]]:
        """Gets the caps_applied of this ApplyUserResponse.

        Map cluster -> rendered caps actually applied  # noqa: E501

        :return: The caps_applied of this ApplyUserResponse.
        :rtype: Dict[str, List[Capability]]
        """
        return self._caps_applied

    @caps_applied.setter
    def caps_applied(self, caps_applied: Dict[str, List[Capability]]):
        """Sets the caps_applied of this ApplyUserResponse.

        Map cluster -> rendered caps actually applied  # noqa: E501

        :param caps_applied: The caps_applied of this ApplyUserResponse.
        :type caps_applied: Dict[str, List[Capability]]
        """

        self._caps_applied = caps_applied

    @property
    def paths(self) -> Dict[str, str]:
        """Gets the paths of this ApplyUserResponse.

        Map cluster -> resolved subvolume path  # noqa: E501

        :return: The paths of this ApplyUserResponse.
        :rtype: Dict[str, str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths: Dict[str, str]):
        """Sets the paths of this ApplyUserResponse.

        Map cluster -> resolved subvolume path  # noqa: E501

        :param paths: The paths of this ApplyUserResponse.
        :type paths: Dict[str, str]
        """

        self._paths = paths

    @property
    def errors(self) -> Dict[str, str]:
        """Gets the errors of this ApplyUserResponse.

        Map cluster -> error string (if any)  # noqa: E501

        :return: The errors of this ApplyUserResponse.
        :rtype: Dict[str, str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: Dict[str, str]):
        """Sets the errors of this ApplyUserResponse.

        Map cluster -> error string (if any)  # noqa: E501

        :param errors: The errors of this ApplyUserResponse.
        :type errors: Dict[str, str]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        # If you want to omit None fields, you can filter after building the dict.
        result = {}
        for attr in self.openapi_types:
            value = getattr(self, attr)
            result[attr] = deep_to_dict(value)
        return result