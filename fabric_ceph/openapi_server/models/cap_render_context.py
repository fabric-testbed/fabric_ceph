from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_ceph.openapi_server.models.base_model import Model
from fabric_ceph.openapi_server import util


class CapRenderContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fs_name=None, subvol_name=None, group_name=None):  # noqa: E501
        """CapRenderContext - a model defined in OpenAPI

        :param fs_name: The fs_name of this CapRenderContext.  # noqa: E501
        :type fs_name: str
        :param subvol_name: The subvol_name of this CapRenderContext.  # noqa: E501
        :type subvol_name: str
        :param group_name: The group_name of this CapRenderContext.  # noqa: E501
        :type group_name: str
        """
        self.openapi_types = {
            'fs_name': str,
            'subvol_name': str,
            'group_name': str
        }

        self.attribute_map = {
            'fs_name': 'fs_name',
            'subvol_name': 'subvol_name',
            'group_name': 'group_name'
        }

        self._fs_name = fs_name
        self._subvol_name = subvol_name
        self._group_name = group_name

    @classmethod
    def from_dict(cls, dikt) -> 'CapRenderContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CapRenderContext of this CapRenderContext.  # noqa: E501
        :rtype: CapRenderContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fs_name(self) -> str:
        """Gets the fs_name of this CapRenderContext.


        :return: The fs_name of this CapRenderContext.
        :rtype: str
        """
        return self._fs_name

    @fs_name.setter
    def fs_name(self, fs_name: str):
        """Sets the fs_name of this CapRenderContext.


        :param fs_name: The fs_name of this CapRenderContext.
        :type fs_name: str
        """
        if fs_name is None:
            raise ValueError("Invalid value for `fs_name`, must not be `None`")  # noqa: E501

        self._fs_name = fs_name

    @property
    def subvol_name(self) -> str:
        """Gets the subvol_name of this CapRenderContext.


        :return: The subvol_name of this CapRenderContext.
        :rtype: str
        """
        return self._subvol_name

    @subvol_name.setter
    def subvol_name(self, subvol_name: str):
        """Sets the subvol_name of this CapRenderContext.


        :param subvol_name: The subvol_name of this CapRenderContext.
        :type subvol_name: str
        """
        if subvol_name is None:
            raise ValueError("Invalid value for `subvol_name`, must not be `None`")  # noqa: E501

        self._subvol_name = subvol_name

    @property
    def group_name(self) -> str:
        """Gets the group_name of this CapRenderContext.


        :return: The group_name of this CapRenderContext.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name: str):
        """Sets the group_name of this CapRenderContext.


        :param group_name: The group_name of this CapRenderContext.
        :type group_name: str
        """

        self._group_name = group_name
