from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_ceph.openapi_server.models.base_model import Model
from fabric_ceph.openapi_server.models.cap_render_context import CapRenderContext
from fabric_ceph.openapi_server.models.capability_template import CapabilityTemplate
from fabric_ceph.openapi_server import util

from fabric_ceph.openapi_server.models.cap_render_context import CapRenderContext  # noqa: E501
from fabric_ceph.openapi_server.models.capability_template import CapabilityTemplate  # noqa: E501

class CreateUserTemplatedRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_entity=None, template_capabilities=None, render=None, sync_across_clusters=True, preferred_source=None):  # noqa: E501
        """CreateUserTemplatedRequest - a model defined in OpenAPI

        :param user_entity: The user_entity of this CreateUserTemplatedRequest.  # noqa: E501
        :type user_entity: str
        :param template_capabilities: The template_capabilities of this CreateUserTemplatedRequest.  # noqa: E501
        :type template_capabilities: List[CapabilityTemplate]
        :param render: The render of this CreateUserTemplatedRequest.  # noqa: E501
        :type render: CapRenderContext
        :param sync_across_clusters: The sync_across_clusters of this CreateUserTemplatedRequest.  # noqa: E501
        :type sync_across_clusters: bool
        :param preferred_source: The preferred_source of this CreateUserTemplatedRequest.  # noqa: E501
        :type preferred_source: str
        """
        self.openapi_types = {
            'user_entity': str,
            'template_capabilities': List[CapabilityTemplate],
            'render': CapRenderContext,
            'sync_across_clusters': bool,
            'preferred_source': str
        }

        self.attribute_map = {
            'user_entity': 'user_entity',
            'template_capabilities': 'template_capabilities',
            'render': 'render',
            'sync_across_clusters': 'sync_across_clusters',
            'preferred_source': 'preferred_source'
        }

        self._user_entity = user_entity
        self._template_capabilities = template_capabilities
        self._render = render
        self._sync_across_clusters = sync_across_clusters
        self._preferred_source = preferred_source

    @classmethod
    def from_dict(cls, dikt) -> 'CreateUserTemplatedRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateUserTemplatedRequest of this CreateUserTemplatedRequest.  # noqa: E501
        :rtype: CreateUserTemplatedRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_entity(self) -> str:
        """Gets the user_entity of this CreateUserTemplatedRequest.


        :return: The user_entity of this CreateUserTemplatedRequest.
        :rtype: str
        """
        return self._user_entity

    @user_entity.setter
    def user_entity(self, user_entity: str):
        """Sets the user_entity of this CreateUserTemplatedRequest.


        :param user_entity: The user_entity of this CreateUserTemplatedRequest.
        :type user_entity: str
        """
        if user_entity is None:
            raise ValueError("Invalid value for `user_entity`, must not be `None`")  # noqa: E501

        self._user_entity = user_entity

    @property
    def template_capabilities(self) -> List[CapabilityTemplate]:
        """Gets the template_capabilities of this CreateUserTemplatedRequest.


        :return: The template_capabilities of this CreateUserTemplatedRequest.
        :rtype: List[CapabilityTemplate]
        """
        return self._template_capabilities

    @template_capabilities.setter
    def template_capabilities(self, template_capabilities: List[CapabilityTemplate]):
        """Sets the template_capabilities of this CreateUserTemplatedRequest.


        :param template_capabilities: The template_capabilities of this CreateUserTemplatedRequest.
        :type template_capabilities: List[CapabilityTemplate]
        """
        if template_capabilities is None:
            raise ValueError("Invalid value for `template_capabilities`, must not be `None`")  # noqa: E501

        self._template_capabilities = template_capabilities

    @property
    def render(self) -> CapRenderContext:
        """Gets the render of this CreateUserTemplatedRequest.


        :return: The render of this CreateUserTemplatedRequest.
        :rtype: CapRenderContext
        """
        return self._render

    @render.setter
    def render(self, render: CapRenderContext):
        """Sets the render of this CreateUserTemplatedRequest.


        :param render: The render of this CreateUserTemplatedRequest.
        :type render: CapRenderContext
        """
        if render is None:
            raise ValueError("Invalid value for `render`, must not be `None`")  # noqa: E501

        self._render = render

    @property
    def sync_across_clusters(self) -> bool:
        """Gets the sync_across_clusters of this CreateUserTemplatedRequest.

        If true, export key from a source cluster and import to others so the same secret is used everywhere; then overwrite caps on each cluster with its rendered (path-aware) caps.   # noqa: E501

        :return: The sync_across_clusters of this CreateUserTemplatedRequest.
        :rtype: bool
        """
        return self._sync_across_clusters

    @sync_across_clusters.setter
    def sync_across_clusters(self, sync_across_clusters: bool):
        """Sets the sync_across_clusters of this CreateUserTemplatedRequest.

        If true, export key from a source cluster and import to others so the same secret is used everywhere; then overwrite caps on each cluster with its rendered (path-aware) caps.   # noqa: E501

        :param sync_across_clusters: The sync_across_clusters of this CreateUserTemplatedRequest.
        :type sync_across_clusters: bool
        """

        self._sync_across_clusters = sync_across_clusters

    @property
    def preferred_source(self) -> str:
        """Gets the preferred_source of this CreateUserTemplatedRequest.

        Preferred source cluster when user doesn't already exist.  # noqa: E501

        :return: The preferred_source of this CreateUserTemplatedRequest.
        :rtype: str
        """
        return self._preferred_source

    @preferred_source.setter
    def preferred_source(self, preferred_source: str):
        """Sets the preferred_source of this CreateUserTemplatedRequest.

        Preferred source cluster when user doesn't already exist.  # noqa: E501

        :param preferred_source: The preferred_source of this CreateUserTemplatedRequest.
        :type preferred_source: str
        """

        self._preferred_source = preferred_source
