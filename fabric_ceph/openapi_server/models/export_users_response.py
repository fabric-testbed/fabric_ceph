from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fabric_ceph.openapi_server.models.base_model import Model
from fabric_ceph.openapi_server import util


class ExportUsersResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, size=1, status=200, type='keyrings', clusters=None):  # noqa: E501
        """ExportUsersResponse - a model defined in OpenAPI

        :param size: The size of this ExportUsersResponse.  # noqa: E501
        :type size: int
        :param status: The status of this ExportUsersResponse.  # noqa: E501
        :type status: int
        :param type: The type of this ExportUsersResponse.  # noqa: E501
        :type type: str
        :param clusters: The clusters of this ExportUsersResponse.  # noqa: E501
        :type clusters: Dict[str, Dict[str, str]]
        """
        self.openapi_types = {
            'size': int,
            'status': int,
            'type': str,
            'clusters': Dict[str, Dict[str, str]]
        }

        self.attribute_map = {
            'size': 'size',
            'status': 'status',
            'type': 'type',
            'clusters': 'clusters'
        }

        self._size = size
        self._status = status
        self._type = type
        self._clusters = clusters

    @classmethod
    def from_dict(cls, dikt) -> 'ExportUsersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExportUsersResponse of this ExportUsersResponse.  # noqa: E501
        :rtype: ExportUsersResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def size(self) -> int:
        """Gets the size of this ExportUsersResponse.


        :return: The size of this ExportUsersResponse.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this ExportUsersResponse.


        :param size: The size of this ExportUsersResponse.
        :type size: int
        """

        self._size = size

    @property
    def status(self) -> int:
        """Gets the status of this ExportUsersResponse.


        :return: The status of this ExportUsersResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this ExportUsersResponse.


        :param status: The status of this ExportUsersResponse.
        :type status: int
        """

        self._status = status

    @property
    def type(self) -> str:
        """Gets the type of this ExportUsersResponse.


        :return: The type of this ExportUsersResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ExportUsersResponse.


        :param type: The type of this ExportUsersResponse.
        :type type: str
        """

        self._type = type

    @property
    def clusters(self) -> Dict[str, Dict[str, str]]:
        """Gets the clusters of this ExportUsersResponse.

        Map of cluster name → keyring map  # noqa: E501

        :return: The clusters of this ExportUsersResponse.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters: Dict[str, Dict[str, str]]):
        """Sets the clusters of this ExportUsersResponse.

        Map of cluster name → keyring map  # noqa: E501

        :param clusters: The clusters of this ExportUsersResponse.
        :type clusters: Dict[str, Dict[str, str]]
        """

        self._clusters = clusters
